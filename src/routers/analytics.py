# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üì¶ –ò–º–ø–æ—Ä—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from collections import defaultdict
from datetime import UTC, date, datetime, timedelta
from decimal import Decimal
from typing import Annotated, Literal, cast

from fastapi import APIRouter, Depends, HTTPException, status

from src.auth.dependencies import get_current_user
from src.config import DEFAULT_BUDGETS, TIME_FRAMES
from src.models import Expense, User
from src.schemas.analytics_schemas import (
    BudgetCategoryStat,
    BudgetOverview,
    CategoryStat,
    LineChartResponse,
    LinePoint,
    MonthComparison,
    PaymentStat,
    PieChartResponse,
    SummaryResponse,
    TotalSpent,
)
from src.utils.analytics_helper import calculate_percent, round_decimal

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
router = APIRouter(prefix="/analytics", tags=["Analytics"])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üìà –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


@router.get("/summary")
async def get_summary(current_user: Annotated[User, Depends(get_current_user)]) -> SummaryResponse:
    """
    üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:
    - –°—É–º–º—ã –∑–∞ –Ω–µ–¥–µ–ª—é / –º–µ—Å—è—Ü / –≥–æ–¥
    - –¢–æ–ø 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    now = datetime.now(UTC)

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    start_of_week = now - timedelta(days=now.weekday())  # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    start_of_month = now.replace(day=1)  # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    start_of_year = now.replace(month=1, day=1)  # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expenses = await Expense.find(Expense.user_id == current_user.id).to_list()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    total_week = total_month = total_year = total_all = Decimal("0")

    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
    by_category: defaultdict[str, Decimal] = defaultdict(lambda: Decimal("0"))
    by_payment: defaultdict[str, Decimal] = defaultdict(lambda: Decimal("0"))

    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for expense in expenses:
        # –û–±—â–∞—è —Å—É–º–º–∞
        total_all += expense.amount

        # –°—É–º–º—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        if expense.date >= start_of_year:
            total_year += expense.amount
        if expense.date >= start_of_month:
            total_month += expense.amount
        if expense.date >= start_of_week:
            total_week += expense.amount

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
        if expense.category:
            by_category[expense.category] += expense.amount
        if expense.payment_method:
            by_payment[expense.payment_method] += expense.amount

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
    top_categories = sorted(by_category.items(), key=lambda x: x[1], reverse=True)[:5]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return SummaryResponse(
        total_spent=TotalSpent(
            week=round_decimal(total_week),
            month=round_decimal(total_month),
            year=round_decimal(total_year),
        ),
        top_categories=[
            CategoryStat(
                category=category,
                amount=round_decimal(amount),
                percent=calculate_percent(amount, total_all),
            )
            for category, amount in top_categories
        ],
        payment_methods=[
            PaymentStat(
                method=method,
                amount=round_decimal(amount),
                percent=calculate_percent(amount, total_all),
            )
            for method, amount in by_payment.items()
        ],
    )


@router.get("/pie")
async def get_pie_chart(
    current_user: Annotated[User, Depends(get_current_user)],
) -> PieChartResponse:
    """ü•ß –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expenses = await Expense.find(Expense.user_id == current_user.id).to_list()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    total = Decimal("0")
    by_category: defaultdict[str, Decimal] = defaultdict(lambda: Decimal("0"))

    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏ —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for expense in expenses:
        if expense.category:
            by_category[expense.category] += expense.amount
            total += expense.amount

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    return PieChartResponse(
        data=[
            CategoryStat(
                category=category,
                amount=round_decimal(amount),
                percent=calculate_percent(amount, total),
            )
            for category, amount in by_category.items()
        ]
    )


@router.get("/line")
async def get_line_chart(
    current_user: Annotated[User, Depends(get_current_user)],
    timeframe: Literal["day", "week", "month", "year"] = "month",
) -> LineChartResponse:
    """üìà –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ—Ç—Ä–µ–∑–∫–∞–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if timeframe not in TIME_FRAMES:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Invalid timeframe. Must be one of: {', '.join(TIME_FRAMES)}",
        )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expenses = await Expense.find(Expense.user_id == current_user.id).to_list()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–∞–º
    data: defaultdict[date, Decimal] = defaultdict(lambda: Decimal("0"))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
    for expense in expenses:
        day = expense.date.date()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if timeframe == "week":
            # –î–ª—è –Ω–µ–¥–µ–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞—á–∞–ª—É –Ω–µ–¥–µ–ª–∏
            key = day - timedelta(days=cast(int, day.weekday()))
        elif timeframe == "year":
            # –î–ª—è –≥–æ–¥–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞—á–∞–ª—É –º–µ—Å—è—Ü–∞
            key = date(
                year=cast(int, day.year),
                month=cast(int, day.month),
                day=1,
            )
        else:
            # –î–ª—è –¥–Ω—è –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            key = day

        data[key] += expense.amount

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    return LineChartResponse(
        timeframe=timeframe,
        data=[
            LinePoint(date=dt, amount=round_decimal(amount)) for dt, amount in sorted(data.items())
        ],
    )


@router.get("/compare")
async def compare_months(
    current_user: Annotated[User, Depends(get_current_user)],
) -> MonthComparison:
    """üîÅ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    now = datetime.now(UTC)

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
    start_current = now.replace(day=1)  # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    start_previous = (start_current - timedelta(days=1)).replace(day=1)  # –ù–∞—á–∞–ª–æ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    current_total = previous_total = Decimal("0")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expenses = await Expense.find(Expense.user_id == current_user.id).to_list()

    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
    for expense in expenses:
        if expense.date >= start_current:
            current_total += expense.amount
        elif start_previous <= expense.date < start_current:
            previous_total += expense.amount

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    change_percent = (
        calculate_percent(current_total - previous_total, previous_total)
        if previous_total != Decimal("0")
        else Decimal("0")
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return MonthComparison(
        previous_month_total=round_decimal(previous_total),
        current_month_total=round_decimal(current_total),
        change_percent=change_percent,
    )


@router.get("/budget")
async def get_budget(current_user: Annotated[User, Depends(get_current_user)]) -> BudgetOverview:
    """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expenses = await Expense.find(Expense.user_id == current_user.id).to_list()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    spent_by_category: defaultdict[str, Decimal] = defaultdict(lambda: Decimal("0"))

    # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for expense in expenses:
        if expense.category:
            spent_by_category[expense.category] += expense.amount

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—é–¥–∂–µ—Ç–∞–º
    categories = [
        BudgetCategoryStat(
            category=category,
            budget=budget,
            spent=round_decimal(spent_by_category.get(category, Decimal("0"))),
            remaining=round_decimal(budget - spent_by_category.get(category, Decimal("0"))),
            percent_used=calculate_percent(
                spent_by_category.get(category, Decimal("0")),
                budget,
            ),
        )
        for category, budget in DEFAULT_BUDGETS.items()
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return BudgetOverview(categories=categories)
