from collections import defaultdict
from datetime import UTC, date, datetime, timedelta
from decimal import Decimal
from typing import Annotated, List, Literal, Optional

from fastapi import APIRouter, Depends, HTTPException, Query, status

from src.auth.dependencies import get_current_user
from src.config import TIME_FRAMES
from src.models import Budget, Transaction, User
from src.schemas.analytics_schemas import (
    BudgetCategoryStat,
    BudgetOverview,
    CategoryStat,
    IncomeExpenseComparison,
    LineChartResponse,
    LinePoint,
    MonthComparison,
    PaymentStat,
    PieChartResponse,
    SummaryResponse,
    TotalSpent,
    TransactionType,
)
from src.utils.analytics_helper import calculate_percent, round_decimal

router = APIRouter(prefix="/transactions", tags=["Transaction Analytics"])


@router.get("/summary")
async def get_summary(
    current_user: Annotated[User, Depends(get_current_user)],
    transaction_type: Annotated[Optional[TransactionType], Query(None)] = None,
) -> SummaryResponse:
    """
    üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
    - –°—É–º–º—ã –∑–∞ –Ω–µ–¥–µ–ª—é / –º–µ—Å—è—Ü / –≥–æ–¥
    - –¢–æ–ø 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    - –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±—é–¥–∂–µ—Ç–∞
    """
    now = datetime.now(UTC)
    start_of_week = now - timedelta(days=now.weekday())
    start_of_month = datetime(now.year, now.month, 1, tzinfo=UTC)
    start_of_year = datetime(now.year, 1, 1, tzinfo=UTC)

    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = Transaction.find(Transaction.user_id == current_user.id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if transaction_type:
        query = query.find(Transaction.type == transaction_type)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    all_transactions = await query.to_list()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    week_transactions = [t for t in all_transactions if t.date >= start_of_week]
    month_transactions = [t for t in all_transactions if t.date >= start_of_month]
    year_transactions = [t for t in all_transactions if t.date >= start_of_year]

    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã
    week_total = sum(t.amount for t in week_transactions)
    month_total = sum(t.amount for t in month_transactions)
    year_total = sum(t.amount for t in year_transactions)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories: dict[str, Decimal] = defaultdict(lambda: Decimal("0"))
    for t in all_transactions:
        if t.category:
            categories[t.category] += t.amount

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—É–º–º–µ
    sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)[:5]

    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    total_amount = sum(amount for amount in categories.values())

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
    payment_methods: dict[str, Decimal] = defaultdict(lambda: Decimal("0"))
    for t in all_transactions:
        if t.payment_method:
            payment_methods[t.payment_method] += t.amount

    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    total_payments = sum(amount for amount in payment_methods.values())

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return SummaryResponse(
        total_spent=TotalSpent(
            week=round_decimal(Decimal(str(week_total))),
            month=round_decimal(Decimal(str(month_total))),
            year=round_decimal(Decimal(str(year_total))),
        ),
        top_categories=[
            CategoryStat(
                category=cat,
                amount=round_decimal(amount),
                percent=calculate_percent(amount, Decimal(str(total_amount)))
                if total_amount > 0
                else Decimal("0"),
            )
            for cat, amount in sorted_categories
        ],
        payment_methods=[
            PaymentStat(
                method=method,
                amount=round_decimal(amount),
                percent=calculate_percent(amount, Decimal(str(total_payments)))
                if total_payments > 0
                else Decimal("0"),
            )
            for method, amount in payment_methods.items()
        ],
    )


@router.get("/pie")
async def get_pie_chart(
    current_user: Annotated[User, Depends(get_current_user)],
    transaction_type: Annotated[Optional[TransactionType], Query(None)] = None,
) -> PieChartResponse:
    """
    ü•ß –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    now = datetime.now(UTC)
    start_of_month = datetime(now.year, now.month, 1, tzinfo=UTC)

    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = Transaction.find(Transaction.user_id == current_user.id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if transaction_type:
        query = query.find(Transaction.type == transaction_type)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
    query = query.find(Transaction.date >= start_of_month)

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = await query.to_list()

    if not transactions:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="No transactions found for this month",
        )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories: dict[str, Decimal] = defaultdict(lambda: Decimal("0"))
    total: Decimal = Decimal("0")

    for t in transactions:
        if t.category:
            categories[t.category] += t.amount
            total += t.amount

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return PieChartResponse(
        data=[
            CategoryStat(
                category=cat,
                amount=round_decimal(Decimal(str(amount))),
                percent=calculate_percent(Decimal(str(amount)), Decimal(str(total))),
            )
            for cat, amount in categories.items()
        ]
    )


@router.get("/line")
async def get_line_chart(
    current_user: Annotated[User, Depends(get_current_user)],
    timeframe: Literal["day", "week", "month", "year"] = "month",
    transaction_type: Annotated[Optional[TransactionType], Query(None)] = None,
) -> LineChartResponse:
    """
    üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    now = datetime.now(UTC)
    days = TIME_FRAMES[timeframe]

    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = Transaction.find(Transaction.user_id == current_user.id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if transaction_type:
        query = query.find(Transaction.type == transaction_type)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    start_date = now - timedelta(days=days)
    query = query.find(Transaction.date >= start_date)

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = await query.to_list()

    if not transactions:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"No transactions found for the last {days} days",
        )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    by_date: dict[date, Decimal] = defaultdict(lambda: Decimal("0"))
    for t in transactions:
        t_date = t.date.date()
        by_date[t_date] += t.amount

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –Ω—É–ª—è–º–∏
    all_dates: list[date] = []
    current = start_date.date()
    while current <= now.date():
        all_dates.append(current)
        current += timedelta(days=1)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return LineChartResponse(
        timeframe=timeframe,
        data=[
            LinePoint(date=d, amount=round_decimal(Decimal(str(by_date.get(d, Decimal("0"))))))
            for d in all_dates
        ],
    )


@router.get("/compare")
async def compare_months(
    current_user: Annotated[User, Depends(get_current_user)],
    transaction_type: Annotated[Optional[TransactionType], Query(None)] = None,
) -> MonthComparison:
    """
    üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
    """
    now = datetime.now(UTC)
    start_of_month = datetime(now.year, now.month, 1, tzinfo=UTC)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    if now.month == 1:
        prev_month = 12
        prev_year = now.year - 1
    else:
        prev_month = now.month - 1
        prev_year = now.year

    start_of_prev_month = datetime(prev_year, prev_month, 1, tzinfo=UTC)

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü - —è–Ω–≤–∞—Ä—å, —Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π - –¥–µ–∫–∞–±—Ä—å –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
    if now.month == 1:
        end_of_prev_month = datetime(now.year, 1, 1, tzinfo=UTC) - timedelta(days=1)
    else:
        end_of_prev_month = start_of_month - timedelta(days=1)

    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = Transaction.find(Transaction.user_id == current_user.id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if transaction_type:
        query = query.find(Transaction.type == transaction_type)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    all_transactions = await query.to_list()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    current_month_transactions = [t for t in all_transactions if t.date >= start_of_month]
    prev_month_transactions = [
        t for t in all_transactions if start_of_prev_month <= t.date <= end_of_prev_month
    ]

    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã
    current_month_total = sum(t.amount for t in current_month_transactions)
    prev_month_total = sum(t.amount for t in prev_month_transactions)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    current_categories: dict[str, Decimal] = defaultdict(lambda: Decimal("0"))
    prev_categories: dict[str, Decimal] = defaultdict(lambda: Decimal("0"))

    for t in current_month_transactions:
        if t.category:
            current_categories[t.category] += t.amount

    for t in prev_month_transactions:
        if t.category:
            prev_categories[t.category] += t.amount

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return MonthComparison(
        previous_month_total=round_decimal(Decimal(str(prev_month_total))),
        current_month_total=round_decimal(Decimal(str(current_month_total))),
        change_percent=calculate_percent(
            Decimal(str(current_month_total - prev_month_total)), Decimal(str(prev_month_total))
        )
        if prev_month_total > 0
        else Decimal("0"),
    )


@router.get("/budget-analysis")
async def get_budget_analysis(
    current_user: Annotated[User, Depends(get_current_user)],
) -> BudgetOverview:
    """
    üí∞ –ê–Ω–∞–ª–∏–∑ –±—é–¥–∂–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    now = datetime.now(UTC)
    start_of_month = datetime(now.year, now.month, 1, tzinfo=UTC)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—é–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    budgets = await Budget.find(Budget.user_id == current_user.id).to_list()

    if not budgets:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="No budgets found",
        )

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    expenses = await Transaction.find(
        Transaction.user_id == current_user.id,
        Transaction.type == "expense",
        Transaction.date >= start_of_month,
    ).to_list()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    expenses_by_category: dict[str, Decimal] = defaultdict(lambda: Decimal("0"))
    for expense in expenses:
        if expense.category:
            expenses_by_category[expense.category] += expense.amount

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    budget_stats: list[BudgetCategoryStat] = []
    for budget in budgets:
        spent = expenses_by_category.get(budget.category, Decimal("0"))
        percent = calculate_percent(spent, budget.limit) if budget.limit > 0 else Decimal("0")

        budget_stats.append(
            BudgetCategoryStat(
                category=budget.category,
                budget=round_decimal(budget.limit),
                spent=round_decimal(spent),
                percent=percent,
            )
        )

    return BudgetOverview(categories=budget_stats)


@router.get("/compare-types")
async def compare_types(
    current_user: Annotated[User, Depends(get_current_user)],
    timeframe: Literal["week", "month", "year"] = "month",
) -> IncomeExpenseComparison:
    """
    üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    """
    now = datetime.now(UTC)
    days = TIME_FRAMES[timeframe]
    start_date = now - timedelta(days=days)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    transactions = await Transaction.find(
        Transaction.user_id == current_user.id, Transaction.date >= start_date
    ).to_list()

    if not transactions:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"No transactions found for the last {days} days",
        )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    expenses = [t for t in transactions if t.type == "expense"]
    incomes = [t for t in transactions if t.type == "income"]

    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã
    expenses_total = sum(t.amount for t in expenses)
    incomes_total = sum(t.amount for t in incomes)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    expense_categories: dict[str, Decimal] = defaultdict(lambda: Decimal("0"))
    income_categories: dict[str, Decimal] = defaultdict(lambda: Decimal("0"))

    for t in expenses:
        if t.category:
            expense_categories[t.category] += t.amount

    for t in incomes:
        if t.category:
            income_categories[t.category] += t.amount

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return IncomeExpenseComparison(
        timeframe=timeframe,
        total_income=round_decimal(Decimal(str(incomes_total))),
        total_expense=round_decimal(Decimal(str(expenses_total))),
        difference=round_decimal(Decimal(str(incomes_total - expenses_total))),
        income_percent=calculate_percent(
            Decimal(str(incomes_total)), Decimal(str(incomes_total + expenses_total))
        ),
        expense_percent=calculate_percent(
            Decimal(str(expenses_total)), Decimal(str(incomes_total + expenses_total))
        ),
        top_income_categories=[
            CategoryStat(
                category=cat,
                amount=round_decimal(amount),
                percent=calculate_percent(amount, Decimal(str(incomes_total))),
            )
            for cat, amount in income_categories.items()
        ],
        top_expense_categories=[
            CategoryStat(
                category=cat,
                amount=round_decimal(amount),
                percent=calculate_percent(amount, Decimal(str(expenses_total))),
            )
            for cat, amount in expense_categories.items()
        ],
    )
