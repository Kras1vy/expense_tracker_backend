import os
from collections import defaultdict
from datetime import UTC, datetime
from decimal import Decimal
from typing import Annotated

from fastapi import APIRouter, Depends, HTTPException
from openai import AsyncOpenAI

from src.auth.dependencies import get_current_user
from src.models import Expense, User
from src.utils.analytics_helper import round_decimal
from src.utils.error_messages import OPENAI_ERROR_MESSAGE, OPENAI_KEY_MISSING

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üìç –†–æ—É—Ç–µ—Ä AI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
router = APIRouter(prefix="/ai", tags=["AI"])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    raise RuntimeError(OPENAI_KEY_MISSING)

openai_client = AsyncOpenAI(api_key=openai_api_key)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ü§ñ AI Endpoint –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.get("/tips")
async def get_ai_tips(
    current_user: Annotated[User, Depends(get_current_user)],
) -> dict[str, list[str]]:
    """
    ü§ñ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–∞—Ç–∞–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    """
    now = datetime.now(UTC)
    start_of_month = datetime(now.year, now.month, 1, tzinfo=UTC)
    print(f"Start of month: {start_of_month} ({type(start_of_month)})")

    # üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    print(f"Current user ID: {current_user.id} (type: {type(current_user.id)})")

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    all_db_expenses = await Expense.find_all().to_list()
    print(f"Total expenses in DB: {len(all_db_expenses)}")
    for exp in all_db_expenses:
        print(
            f"Expense: user_id={exp.user_id} (type: {type(exp.user_id)}), amount={exp.amount}, category={exp.category}"
        )

    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_expenses = await Expense.find({"user_id": current_user.id}).to_list()
    print(f"Found expenses: {len(all_expenses)}")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤ UTC
    now = datetime.now(UTC)
    start_of_month = datetime(now.year, now.month, 1, tzinfo=UTC)
    print(f"Start of month: {start_of_month} ({type(start_of_month)})")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    expenses = []
    for exp in all_expenses:
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –¥–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ –∏–º–µ–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC
        exp_date = exp.date.replace(tzinfo=UTC) if exp.date.tzinfo is None else exp.date
        print(f"Expense date: {exp_date} ({type(exp_date)}), amount: {exp.amount}")
        print(f"Date comparison: {exp_date} >= {start_of_month} = {exp_date >= start_of_month}")

        if exp_date >= start_of_month:
            expenses.append(exp)

    if not expenses:
        raise HTTPException(status_code=404, detail="No expenses found to analyze")

    # üìä –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    by_category: dict[str, Decimal] = defaultdict(lambda: Decimal("0"))
    total: Decimal = Decimal("0")

    for exp in expenses:
        amount: Decimal = exp.amount
        if exp.category:
            by_category[exp.category] += amount
            total += amount

    # ‚úçÔ∏è –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è GPT
    analysis_text = "\n".join(
        [f"- {cat}: {round_decimal(amount)} CAD" for cat, amount in by_category.items()]
    )

    prompt = (
        f"–£ –º–µ–Ω—è –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü –Ω–∞ —Å—É–º–º—É {round_decimal(total)} CAD.\n"  # type: ignore
        f"–í–æ—Ç —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        f"{analysis_text}\n\n"
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–∞, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –º–æ—ë —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. –£—á–∏—Ç—ã–≤–∞–π, –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ."
    )

    # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
    try:
        response = await openai_client.chat.completions.create(
            model=os.getenv("OPENAI_MODEL", "gpt-3.5-turbo"),
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–∞–º.",
                },
                {"role": "user", "content": prompt},
            ],
            temperature=float(os.getenv("OPENAI_TEMPERATURE", "0.7")),
            max_tokens=int(os.getenv("OPENAI_MAX_TOKENS", "300")),
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=OPENAI_ERROR_MESSAGE.format(str(e))) from e

    # üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤
    answer = response.choices[0].message.content
    return {"tips": answer.strip().split("\n") if answer else ["–ù–µ—Ç —Å–æ–≤–µ—Ç–∞"]}
