from decimal import Decimal
from typing import Annotated  # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

from beanie import PydanticObjectId
from fastapi import APIRouter, Depends, HTTPException, status  # FastAPI —Ä–æ—É—Ç–∏–Ω–≥ –∏ —É—Ç–∏–ª–∏—Ç—ã

from src.auth.dependencies import get_current_user  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
from src.models import Expense, User  # –ú–æ–¥–µ–ª—å —Ä–∞—Å—Ö–æ–¥–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
from src.schemas.base import ExpenseCreate, ExpensePublic  # –°—Ö–µ–º—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞

router = APIRouter(prefix="/expenses", tags=["Expenses"])  # –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è /expenses


@router.post("/", status_code=status.HTTP_201_CREATED)
async def create_expense(
    expense_in: ExpenseCreate,
    current_user: Annotated[User, Depends(get_current_user)],  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
) -> ExpensePublic:  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ö–µ–º—ã
    if not current_user.id:
        raise ValueError("User ID is required")

    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Ä–∞—Å—Ö–æ–¥–∞, –¥–æ–±–∞–≤–ª—è—è ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expense = Expense(**expense_in.model_dump(), user_id=PydanticObjectId(current_user.id))

    await expense.insert()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user.balance -= expense.amount
    await current_user.save()

    return ExpensePublic(**expense.model_dump())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞


@router.get(
    "/",
)  # –≠–Ω–¥–ø–æ–∏–Ω—Ç GET /expenses, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
async def get_expenses(
    current_user: Annotated[User, Depends(get_current_user)],  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
) -> list[ExpensePublic]:  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ö–µ–º—ã
    if not current_user.id:
        raise HTTPException(status_code=400, detail="User ID is required")

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    expenses = await Expense.find(Expense.user_id == current_user.id).to_list()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ö–µ–º—ã
    return [
        ExpensePublic(
            id=expense.id if expense.id else PydanticObjectId(),
            amount=Decimal(str(expense.amount)),
            category=expense.category,
            payment_method=expense.payment_method,
            date=expense.date,
            description=expense.description,
            user_id=expense.user_id,
        )
        for expense in expenses
    ]


@router.delete("/{expense_id}")
async def delete_expense(
    expense_id: PydanticObjectId,  # id —Ä–∞—Å—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å
    current_user: Annotated[
        User, Depends(get_current_user)
    ],  # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
) -> dict[str, str]:
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –ø–æ ID
    expense = await Expense.get(expense_id)

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∫–∏–¥–∞–µ–º 404
    if expense is None:
        raise HTTPException(status_code=404, detail="Expense not found")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if expense.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to delete this expense")

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user.balance += expense.amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞
    await current_user.save()

    # –£–¥–∞–ª—è–µ–º
    await expense.delete()

    return {"message": "Expense deleted successfully"}


@router.put("/{expense_id}")
async def update_expense(
    expense_id: PydanticObjectId,  # 1Ô∏è‚É£ ID —Ä–∞—Å—Ö–æ–¥–∞ –≤ URL
    expense_in: ExpenseCreate,  # 2Ô∏è‚É£ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    current_user: Annotated[User, Depends(get_current_user)],  # –ó–∞—â–∏—â—ë–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
) -> dict[str, str]:
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –ø–æ ID
    expense = await Expense.get(expense_id)
    if not expense:
        raise HTTPException(status_code=404, detail="Expense not found")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if expense.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to update this expense")

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user.balance += expense.amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—É–º–º—É
    current_user.balance -= expense_in.amount  # –í—ã—á–∏—Ç–∞–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É
    await current_user.save()

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    expense.description = expense_in.description
    expense.amount = expense_in.amount
    expense.category = expense_in.category
    expense.payment_method = expense_in.payment_method
    if expense_in.date:
        expense.date = expense_in.date

    await expense.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É

    return {"message": "Expense updated successfully"}


@router.get("/{expense_id}")  # –≠–Ω–¥–ø–æ–∏–Ω—Ç: GET /expenses/123
async def get_expense_by_id(
    expense_id: PydanticObjectId,  # üÜî ID —Ä–∞—Å—Ö–æ–¥–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ URL
    current_user: Annotated[
        User, Depends(get_current_user)
    ],  # üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
) -> ExpensePublic:
    expense = await Expense.get(expense_id)  # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑–µ
    if not expense:
        raise HTTPException(status_code=404, detail="Expense not found")  # ‚ùå –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω

    if (
        expense.user_id != current_user.id
    ):  # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?
        raise HTTPException(status_code=403, detail="Not authorized to access this expense")

    return ExpensePublic(**expense.model_dump())  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥
