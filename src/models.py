from datetime import UTC, date, datetime  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UTC –∏ datetime –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
from decimal import Decimal  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Decimal
from enum import StrEnum
from typing import Any, ClassVar, Literal, override

from beanie import (  # Document ‚Äî –º–æ–¥–µ–ª—å –¥–ª—è MongoDB, PydanticObjectId ‚Äî ID-—à–∫–∞
    Document,
    PydanticObjectId,
)
from pydantic import (  # EmailStr ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ email, Field ‚Äî –¥–ª—è –∑–∞–¥–∞–Ω–∏—è default –∑–Ω–∞—á–µ–Ω–∏–π
    EmailStr,
    Field,
    field_validator,
)

from src.utils.mongo_types import convert_decimal128


class User(Document):
    email: EmailStr  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ email, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
    first_name: str  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    last_name: str  # –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    birth_date: datetime | None = None  # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    hashed_password: str | None = None  # –ü–∞—Ä–æ–ª—å –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è OAuth
    google_id: str | None = (
        None  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google, –º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    )
    created_at: datetime = Field(
        default_factory=lambda: datetime.now(UTC)
    )  # üïì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    balance: Decimal = Field(default=Decimal("0.00"))

    @field_validator("balance", mode="before")
    @classmethod
    def validate_balance(cls, v: Any) -> Decimal:
        return convert_decimal128(v)

    @override
    def model_dump(self, *args: Any, **kwargs: Any) -> dict[str, Any]:
        data = super().model_dump(*args, **kwargs)
        if "balance" in data:
            data["balance"] = float(data["balance"])
        return data

    class Settings:
        name = "users"  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ MongoDB
        indexes: ClassVar[list[str]] = [
            "email",  # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ email –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
            "google_id",  # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Google
        ]
        json_encoders = {Decimal: float}


class TransactionType(StrEnum):
    EXPENSE = "expense"
    INCOME = "income"


class Transaction(Document):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤, —Ç–∞–∫ –∏ –¥–æ—Ö–æ–¥–æ–≤
    """

    user_id: PydanticObjectId  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    amount: Decimal  # –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    source: Literal["manual", "plaid"] = "manual"
    type: TransactionType  # –¢–∏–ø: expense –∏–ª–∏ income
    category: str | None = None  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ï–¥–∞", "–ó–∞—Ä–ø–ª–∞—Ç–∞")
    payment_method: str | None = None  # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤)
    date: datetime = Field(default_factory=lambda: datetime.now(UTC))  # –î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    description: str | None = None  # –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

    @field_validator("amount", mode="before")
    @classmethod
    def validate_amount(cls, v: Any) -> Decimal:
        return convert_decimal128(v)

    @field_validator("date", mode="before")
    @classmethod
    def validate_date(cls, v: datetime | None) -> datetime:
        if v is None:
            return datetime.now(UTC)
        if v.tzinfo is None:
            return v.replace(tzinfo=UTC)
        return v

    @override
    def model_dump(self, *args: Any, **kwargs: Any) -> dict[str, Any]:
        data = super().model_dump(*args, **kwargs)
        if "amount" in data:
            data["amount"] = float(data["amount"])
        return data

    class Settings:
        name = "transactions"  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ MongoDB
        json_encoders = {Decimal: float}  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –≤ float –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        indexes: ClassVar[list[str | tuple[str, ...]]] = [
            "user_id",  # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ("user_id", "date"),  # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ
            ("user_id", "category"),  # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            ("user_id", "type"),  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É (—Ä–∞—Å—Ö–æ–¥/–¥–æ—Ö–æ–¥)
            ("user_id", "amount"),  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Å—É–º–º–µ
            # –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥
            ("user_id", "category", "date"),
            # –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∏ –¥–∞—Ç–µ
            ("user_id", "type", "date"),
        ]


# üîê –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è refresh —Ç–æ–∫–µ–Ω–æ–≤ –≤ MongoDB
class RefreshToken(Document):
    user_id: PydanticObjectId  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–∫–µ–Ω
    token: str  # –°–∞–º refresh —Ç–æ–∫–µ–Ω (—É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    created_at: datetime  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
    expires_at: datetime  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (–ø–æ—Å–ª–µ —ç—Ç–æ–π –¥–∞—Ç—ã –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º)

    class Settings:
        name = "refresh_tokens"  # üëà –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ MongoDB
        indexes: ClassVar[list[str | tuple[str, ...]]] = [
            "token",  # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            "user_id",  # –î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ("user_id", "expires_at"),  # –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
        ]


class Category(Document):
    """
    üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ (–∫–∞—Å—Ç–æ–º–Ω–∞—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è)
    """

    name: str = Field(..., min_length=1, max_length=50)  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    icon: str | None = Field(default=None, max_length=10)  # –≠–º–æ–¥–∑–∏/–∏–∫–æ–Ω–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    color: str | None = Field(
        default=None,
        pattern="^#[0-9a-fA-F]{6}$",
        description="HEX color code (e.g. #FF5733)",
    )  # –¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    user_id: PydanticObjectId | None = None  # –ï—Å–ª–∏ None ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è, –∏–Ω–∞—á–µ –∫–∞—Å—Ç–æ–º–Ω–∞—è
    is_default: bool = False  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    class Settings:
        name = "categories"
        indexes: ClassVar[list[str | tuple[str, str]]] = [
            "user_id",  # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ("name", "user_id"),  # –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        ]


class PaymentMethod(Document):
    """
    üí≥ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞—Ç—ë–∂–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    name: str  # –ù–∞–∑–≤–∞–Ω–∏–µ: "TD Debit 1234"
    bank: str | None = None  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞: TD, CIBC –∏ —Ç.–¥.
    card_type: str | None = Field(
        default=None, pattern="^(credit|debit)$"
    )  # –¢–∏–ø: debit –∏–ª–∏ credit
    last4: str | None = Field(default=None, min_length=4, max_length=4)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
    icon: str | None = None  # üé® –≠–º–æ–¥–∑–∏ –∏–ª–∏ –∏–∫–æ–Ω–∫–∞: üè¶ üí≥
    user_id: PydanticObjectId  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    class Settings:
        name = "payment_methods"
        indexes: ClassVar[list[str | tuple[str, ...]]] = [
            "user_id",  # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ("user_id", "card_type"),  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∫–∞—Ä—Ç—ã
            ("user_id", "bank"),  # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –±–∞–Ω–∫–∞–º
        ]


class Budget(Document):
    """
    üí∞ –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """

    user_id: PydanticObjectId  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    category: str  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "food")
    limit: Decimal = Field(..., ge=0)  # –°—É–º–º–∞ –ª–∏–º–∏—Ç–∞ (–Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è)
    created_at: datetime = Field(
        default_factory=lambda: datetime.now(UTC)
    )  # üïí UTC-—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

    @field_validator("limit", mode="before")
    @classmethod
    def validate_limit(cls, v: Any) -> Decimal:
        return convert_decimal128(v)

    @override
    def model_dump(self, *args: Any, **kwargs: Any) -> dict[str, Any]:
        data = super().model_dump(*args, **kwargs)
        if "limit" in data:
            data["limit"] = float(data["limit"])
        return data

    class Settings:
        name = "budgets"  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        json_encoders = {Decimal: float}  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –≤ float –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        indexes: ClassVar[list[str | tuple[str, ...]]] = [
            "user_id",  # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±—é–¥–∂–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ("user_id", "category"),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            ("user_id", "created_at"),  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        ]


class BankConnection(Document):
    user_id: PydanticObjectId
    access_token: str
    item_id: str
    institution_id: str | None = Field(default=None)
    created_at: datetime = Field(default_factory=lambda: datetime.now(UTC))

    class Settings:
        name = "bank_connections"


class BankAccount(Document):
    user_id: PydanticObjectId
    bank_connection_id: PydanticObjectId  # —Å–≤—è–∑—å —Å BankConnection
    account_id: str  # ID –æ—Ç Plaid
    name: str
    official_name: str | None = None
    type: str
    subtype: str | None = None
    mask: str | None = None
    current_balance: float | None = None
    available_balance: float | None = None
    iso_currency_code: str | None = None
    created_at: datetime = Field(default_factory=lambda: datetime.now(UTC))

    class Settings:
        name = "bank_accounts"


class BankTransaction(Document):
    user_id: PydanticObjectId
    bank_account_id: PydanticObjectId  # —Å–≤—è–∑—å —Å BankAccount
    transaction_id: str  # –æ—Ç Plaid
    source: Literal["manual", "plaid"] = "plaid"  # –¥–ª—è BankTransaction
    name: str
    amount: float
    date: date
    category: list[str] | None = None
    payment_channel: str | None = None
    iso_currency_code: str | None = None
    pending: bool = False
    created_at: datetime = Field(default_factory=lambda: datetime.now(UTC))

    class Settings:
        name = "bank_transactions"
